Object.defineProperty(exports, "__esModule", { value: true });
exports.executeString = void 0;
const lodash_1 = require("lodash");
const foxpage_shared_1 = require("@foxpage/foxpage-shared");
const constant_1 = require("./constant");
const main_1 = require("./main");
const utils_1 = require("./utils");
/**
 * parse string
 *
 * @export
 * @template T
 * @param {string} str
 * @param {Record<string, any>} [values={}]
 * @param {Messages} [messages=[]]
 * @return {*}  {(string | T | undefined)}
 */
function executeString(expression, values = {}, messages = []) {
    const str = expression;
    const checkValue = (val) => {
        // undefined is invalid data
        if (val === undefined) {
            throw new Error('value is undefined');
        }
    };
    const error = (message, ...args) => {
        const msg = foxpage_shared_1.format(message, ...args);
        messages.hasError = true;
        messages.push(msg);
    };
    messages.hasError = false;
    if (/^\{\{([\s\S]*)\}\}$/.test(str) && !str.substr(0, str.length - 2).includes('}}')) {
        try {
            const expression = str.substring(2, str.length - 2);
            const val = main_1.evalWithScope(values, utils_1.EXPFormatter(expression));
            checkValue(val);
            return val;
        }
        catch (err) {
            error('parse string "%s" fail, reason: %s', str, err.message);
            return undefined;
        }
    }
    const regex = constant_1.MATCH_EXPRESSION_REGEX;
    const result = str.replace(regex, (match, expression) => {
        try {
            const val = main_1.evalWithScope(values, utils_1.EXPFormatter(expression));
            checkValue(val);
            return stringify(val);
        }
        catch (err) {
            error('parse string "%s" in "%s" fail, reason: %s', match, str, err.message);
            return '';
        }
    });
    return result;
}
exports.executeString = executeString;
function stringify(val) {
    if (lodash_1.isString(val)) {
        return val;
    }
    else if (lodash_1.isObject(val)) {
        try {
            return JSON.stringify(val);
        }
        catch (error) {
            return '';
        }
    }
    return String(val);
}
