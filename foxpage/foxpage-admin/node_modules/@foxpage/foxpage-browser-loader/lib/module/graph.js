Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleGraph = void 0;
const loader_1 = require("./loader");
const utils_1 = require("./utils");
class ModuleGraph {
    constructor() {
        this.map = {};
    }
    get(moduleName, version) {
        const id = this.findModuleId(moduleName, version);
        return id ? this.map[id] : undefined;
    }
    add(moduleName, config) {
        const id = (0, utils_1.generateModuleId)(moduleName, config.version);
        if (!this.map[id]) {
            this.map[id] = new loader_1.ModuleLoader(moduleName, config, id);
        }
        else {
            this.map[id].update(config);
        }
        return this;
    }
    load(moduleName, version) {
        const id = this.findModuleId(moduleName, version);
        return id ? this._load(id) : Promise.reject(`can't find module ${moduleName}:${version}}`);
    }
    _load(id) {
        const loader = this.map[id];
        if (loader) {
            const { deps = [], softDeps = [] } = loader;
            const loadSoftDepPromise = softDeps.length ? this.loadDeps(softDeps) : Promise.resolve();
            const loadPromise = deps.length ? this.loadDeps(deps).then(() => loader.load()) : loader.load();
            return Promise.all([loadPromise, loadSoftDepPromise]).then(([res]) => res);
        }
        return Promise.reject(new Error(`miss config for module ${id}`));
    }
    loadDeps(deps) {
        return Promise.all(deps.map(dep => this._load(dep).catch((err) => {
            err.message = `load dependency "${dep}" fail: ${err.message}`;
            throw err;
        })));
    }
    findModuleId(moduleName, version) {
        let id = (0, utils_1.generateModuleId)(moduleName, version);
        if (!(id in this.map)) {
            const modules = Object.values(this.map).filter(mod => mod.name === moduleName);
            if (modules.length === 1) {
                id = modules[0].id;
            }
        }
        return id in this.map ? id : null;
    }
}
exports.ModuleGraph = ModuleGraph;
