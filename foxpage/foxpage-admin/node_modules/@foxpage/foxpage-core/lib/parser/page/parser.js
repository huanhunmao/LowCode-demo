var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageParserImpl = void 0;
const lodash_1 = __importDefault(require("lodash"));
const foxpage_shared_1 = require("@foxpage/foxpage-shared");
const directive_1 = require("../directive");
const sandbox_1 = require("../sandbox");
/**
 * page parser impl
 *
 * @export
 * @class PageParserImpl
 * @implements {PageParser}
 */
class PageParserImpl {
    constructor(page) {
        /**
         * template containers
         *
         * @type {Map<string, StructureNode>}
         */
        this.templateSchemasMap = new Map();
        this.page = lodash_1.default.cloneDeep(page);
        this.messages = new foxpage_shared_1.Messages();
    }
    /**
     * pre parse for prepare template containers eg.
     *
     */
    preParse(ctx) {
        // init this.templateSchemasMap
        this.getTplContainers(this.page.schemas, ctx);
    }
    /**
     * do parse
     *
     * @param {Context} ctx
     * @param {StructureNode[]} [list=this.page.schemas]
     * @return {StructureNode[]}  {StructureNode[]}
     */
    parse(ctx, list = this.page.schemas) {
        let newList = [];
        list.forEach(item => {
            const { props, directive, children } = item;
            const directiveInstance = directive ? new directive_1.DirectiveParser(directive) : null;
            // default will show
            item.show = true;
            if (directiveInstance === null || directiveInstance === void 0 ? void 0 : directiveInstance.hasIf()) {
                item.show = !!directiveInstance.parseIf(ctx, this.messages);
            }
            // if contains tpl directive, will use template content cover this node
            if (directiveInstance === null || directiveInstance === void 0 ? void 0 : directiveInstance.hasTpl()) {
                // replace page node from matched tpl schemas
                const tplSchemas = directiveInstance.parseTpl(ctx, this.messages);
                if (tplSchemas) {
                    newList = newList.concat(this.parse(ctx, lodash_1.default.cloneDeep(tplSchemas)));
                }
                else {
                    const msg = `${directive === null || directive === void 0 ? void 0 : directive.tpl} not matched template`;
                    this.messages.push(new Error(msg));
                    newList.push(item);
                }
            }
            else {
                // props parse
                if (props) {
                    const resolvedProps = sandbox_1.executeObject(props, ctx.variables, this.messages);
                    item.props = resolvedProps;
                }
                if (children && children.length > 0) {
                    item.children = this.parse(ctx, children);
                }
                newList.push(item);
            }
        });
        return newList;
    }
    /**
     * get template container by templateId
     *
     * @param {string} templateId
     * @return {StructureNode|undefined}
     */
    getTemplateSchemas(templateId) {
        return this.templateSchemasMap.get(templateId);
    }
    getTplContainers(structures = [], ctx) {
        structures.forEach(item => {
            var _a, _b, _c, _d;
            const tplVar = (_a = item.directive) === null || _a === void 0 ? void 0 : _a.tpl;
            if (tplVar && typeof tplVar === 'string') {
                if (tplVar.startsWith('{{') && tplVar.indexOf('}}') === tplVar.length - 2) {
                    const expression = tplVar.substring(2, tplVar.length - 2);
                    (_b = ctx.logger) === null || _b === void 0 ? void 0 : _b.info(`${expression} to match template id`);
                    const templateId = this.page.relation ? (_c = this.page.relation[expression]) === null || _c === void 0 ? void 0 : _c.id : '';
                    if (templateId) {
                        this.templateSchemasMap.set(templateId, item);
                        (_d = ctx.logger) === null || _d === void 0 ? void 0 : _d.info(`${expression} matched template id@${templateId} succeed`);
                    }
                }
            }
            if (item.children && item.children.length > 0) {
                this.getTplContainers(item.children, ctx);
            }
        });
    }
}
exports.PageParserImpl = PageParserImpl;
