declare type JsonFriendlyObject<T extends {
    [key: string]: any;
}> = {
    [P in keyof T]: JsonFriendlyType<T[P]>;
};
declare type JsonFriendlyType<T> = T extends Map<string | number, infer P> ? Record<string, P> : T extends Set<infer P> ? Array<P> : T extends (...args: any) => any | Promise<any> ? string : T extends {
    [key: string]: any;
} ? JsonFriendlyObject<T> : T;
export declare function toJSONFriendly<T>(value: T): JsonFriendlyType<T>;
export declare function betterJSONStringify(obj: any): string;
export {};
