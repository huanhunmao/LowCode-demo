Object.defineProperty(exports, "__esModule", { value: true });
exports.matchByName = void 0;
/**
 * match the node by name, match all
 * @param record
 * @param list
 * @param mergeNode
 */
exports.matchByName = (record, list, mergeNode) => {
    // get the record with key is name
    // for get the value easy
    const namesRecord = {};
    Object.values(record).forEach(item => {
        if (!namesRecord[item.name]) {
            namesRecord[item.name] = [];
        }
        namesRecord[item.name].push(item);
    });
    list.forEach(item => {
        var _a;
        const baseNodes = namesRecord[item.name];
        if (baseNodes) {
            baseNodes.forEach(node => {
                const merged = mergeNode(node, item);
                record[node.id] = Object.assign(Object.assign({}, merged), { childIds: node.childIds });
            });
        }
        else {
            // collect the new nodes
            record[item.id] = item;
            const parentId = ((_a = item.extension) === null || _a === void 0 ? void 0 : _a.parentId) || '';
            const parent = record[parentId];
            if (parent) {
                if (!parent.childIds) {
                    parent.childIds = [];
                }
                parent.childIds.push(item.id);
            }
        }
    });
};
