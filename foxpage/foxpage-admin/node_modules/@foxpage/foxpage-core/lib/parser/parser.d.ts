import { ConditionParser, Context, Page, Parser, ParserOption, VariableParser } from '@foxpage/foxpage-types';
import { MainParser } from './main';
/**
 * parser implements
 *
 * @export
 * @class ParserImpl
 * @implements {Parser}
 */
export declare class ParserImpl implements Parser {
    /**
     * variable parser
     *
     * @type {VariableParserImpl}
     */
    variableParser?: VariableParser;
    /**
     * condition parser
     *
     * @type {ConditionParserImpl}
     */
    conditionParser?: ConditionParser;
    mainParsers: Record<string, MainParser>;
    constructor();
    /**
     * prepare
     * @param opt parserOption
     */
    prepare(opt?: ParserOption): Promise<void>;
    /**
     * pre parse
     * first step: preParse page
     * second step: preParse template
     */
    preParse(page: Page, ctx: Context, opt: {
        sessionId: string;
    }): void;
    /**
     * parse
     * first: variable(functions)
     * second: condition
     * last: page
     */
    parse(sessionId: string, ctx: Context): Promise<{
        parsed: import("@foxpage/foxpage-types").StructureNode<any>[];
        messages: import("@foxpage/foxpage-shared").Messages | undefined;
    } | undefined>;
    /**
     * get parse status
     *
     * @return {*}  {boolean} true:parsed,false:no parse
     */
    isParsed(): boolean;
    /**
     * clear instance
     *
     */
    reset(opt: {
        sessionId: string;
    }): void;
}
