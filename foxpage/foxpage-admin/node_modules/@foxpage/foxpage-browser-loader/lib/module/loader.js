Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleLoader = void 0;
const asset_1 = require("./loaders/asset");
const umd_1 = require("./loaders/umd");
const config_1 = require("./config");
const utils_1 = require("./utils");
const LOADERS = {
    css: asset_1.loadStyleModule,
    js: asset_1.loadScriptModule,
    umd: umd_1.loadUmdModule,
};
const abstractLoader = mod => {
    return Promise.reject(new Error(`module ${mod.id} can't load.`));
};
class ModuleLoader {
    constructor(name, config = {}, id = (0, utils_1.generateModuleId)(name, config.version)) {
        this.deps = [];
        this.softDeps = [];
        this.exports = undefined;
        this.status = 'create';
        const { version } = config;
        this.name = name;
        this.version = version;
        this.id = id;
        this.config = config;
        this.type = config.type || 'umd';
        this.loader = LOADERS[this.type] || abstractLoader;
        this.update(config);
    }
    update(config) {
        if (this.loaded) {
            return;
        }
        const { url, deps = [], softDeps = [] } = config;
        Object.assign(this.config, config);
        this.deps = deps;
        this.softDeps = softDeps;
        this.url = url;
        this.customLoader = config.load;
        this.meta = config.meta;
    }
    get loaded() {
        return !!this._loadPromise;
    }
    get enable() {
        return this.status === 'success';
    }
    load() {
        if (!this._loadPromise) {
            this.status === 'pending';
            this._loadPromise = this._load()
                .then(exportData => {
                console.debug(`module "${this.id}" export:`, exportData);
                this.exports = exportData;
                this.status = 'success';
                if (this.config.injectWindow) {
                    const win = (0, config_1.getWindow)();
                    win[this.config.injectWindow] = exportData;
                }
                return exportData;
            })
                .catch(err => {
                this.status = 'fail';
                this.error = err;
                return undefined;
            });
        }
        return this._loadPromise;
    }
    _load() {
        if (this.status === 'success') {
            return Promise.resolve(this.exports);
        }
        if (this.customLoader) {
            return Promise.resolve(this.customLoader());
        }
        return this.loader(this);
    }
}
exports.ModuleLoader = ModuleLoader;
