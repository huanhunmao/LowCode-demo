var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextInstance = void 0;
const lodash_1 = __importDefault(require("lodash"));
const variable_1 = require("../variable");
const constant_1 = require("./constant");
const proxy_1 = require("./proxy");
/**
 * Foxpage abstract context
 *
 * @export
 * @abstract
 * @class ContextInstance
 * @implements {Context}
 */
class ContextInstance {
    constructor(info) {
        this.url = '';
        this.host = '';
        /**
         * parsed resources
         *
         * @type {ContextResource}
         */
        this.resource = {};
        /**
         * origin resources
         * immutable
         * @type {ContextOrigin}
         */
        this.origin = {};
        this.appId = info.appId;
        this.appSlug = info.slug;
        this.appConfigs = info.configs;
    }
    /**
     * update relation info
     * @param relationInfo relation info
     */
    updateOrigin(relationInfo) {
        const { sysVariables = [], variables = [] } = relationInfo, rest = __rest(relationInfo, ["sysVariables", "variables"]);
        // 'templates' | 'functions' | 'conditions' | 'mocks'
        Object.keys(rest).forEach(key => {
            const type = key;
            this.updateOriginByKey(type, rest[type]);
        });
        this.updateOriginByKey('sysVariables', sysVariables.map(item => variable_1.createSysVariable(item)));
        this.updateOriginByKey('variables', (this.origin.sysVariables || []).concat(variables));
    }
    /**
     * update origin data
     * @param key key type
     * @param value data
     */
    updateOriginByKey(key, value) {
        if (value !== undefined) {
            this.origin[key] = value;
        }
    }
    /**
     * update origin page
     *
     * @param {Page} page
     */
    updateOriginPage(page) {
        this.updateOriginByKey('page', page);
    }
    /**
     * get origin
     *
     * @template K
     * @param {K} key
     * @return {*}  {RenderContextOrigin[K]}
     */
    getOrigin(key) {
        const result = this.origin[key];
        if (result) {
            return lodash_1.default.cloneDeep(result);
        }
        return;
    }
    /**
     * update page info
     *
     * @param {Page} page
     */
    updatePage(page) {
        this.innerPage = page;
    }
    /**
     * update ctx resources
     *
     * @template K
     * @template T
     * @param {K} target
     * @param {string} key
     * @param {T} value
     */
    updateResource(target, key, value) {
        const targetSource = this.resource[target];
        if (!targetSource) {
            this.resource[target] = {
                [key]: value,
            };
        }
        else {
            targetSource[key] = value;
        }
    }
    get page() {
        return this.innerPage || {};
    }
    get templates() {
        return this.getValues(this.resource.templates);
    }
    get conditions() {
        return this.getValues(this.resource.conditions);
    }
    get functions() {
        return this.getValues(this.resource.functions);
    }
    get variables() {
        const allVars = this.getValues(this.resource.variables);
        const [sysVariables, cusVariables] = this.filterVariables(allVars);
        // all variables
        const variables = cusVariables;
        variables['__functions'] = proxy_1.contentProxy(this.functions);
        variables['__conditions'] = proxy_1.contentProxy(this.conditions);
        variables['__templates'] = proxy_1.contentProxy(this.templates);
        variables['__context'] = proxy_1.contentProxy(Object.assign({}, sysVariables));
        return variables;
    }
    getValues(contents) {
        if (!contents) {
            return {};
        }
        const values = {};
        Object.keys(contents).forEach(key => {
            const keyStr = key;
            const { parsed } = contents[keyStr];
            values[key] = parsed;
        });
        return values;
    }
    filterVariables(list) {
        const sysVars = {};
        const cusVars = {};
        Object.keys(list).forEach(key => {
            if (key.indexOf(constant_1.CONTEXT_VARIABLE_MARK) === 0) {
                const sysKey = key.replace(constant_1.CONTEXT_VARIABLE_MARK, '');
                sysVars[sysKey] = list[key];
            }
            else {
                cusVars[key] = list[key];
            }
        });
        return [sysVars, cusVars];
    }
}
exports.ContextInstance = ContextInstance;
