Object.defineProperty(exports, "__esModule", { value: true });
exports.findMountNode = exports.findHead = exports.findBody = exports.findStructureByMeta = exports.findStructure = exports.findStructureById = exports.findStructureByName = void 0;
const createSelector = (key, val) => (structure) => {
    return structure && structure[key] === val;
};
exports.findStructureByName = (dsl, value) => {
    const selector = createSelector('name', value);
    return exports.findStructure(dsl, selector);
};
exports.findStructureById = (dsl, value) => {
    const selector = createSelector('id', value);
    return exports.findStructure(dsl, selector);
};
exports.findStructure = (list, selector) => {
    var _a;
    for (let idx = 0; idx < list.length; idx++) {
        const node = list[idx];
        if (selector(node)) {
            return node;
        }
        if ((_a = node.children) === null || _a === void 0 ? void 0 : _a.length) {
            const result = exports.findStructure(node.children, selector);
            if (result) {
                return result;
            }
        }
    }
    return null;
};
/**
 * find structure by meta info
 *
 * @export
 * @param {Context} ctx
 * @param {('isHead' | 'isBody')} tag
 * @return {*}
 */
function findStructureByMeta(dsl, ctx, tag) {
    return exports.findStructure(dsl || [], item => {
        var _a;
        if (item) {
            const component = (_a = ctx.componentMap) === null || _a === void 0 ? void 0 : _a.get(item.id);
            if (component) {
                // useStyledComponents: the meta of package provide
                return !!component.meta[tag];
            }
        }
        return false;
    });
}
exports.findStructureByMeta = findStructureByMeta;
function findBody(dsl, ctx) {
    return findStructureByMeta(dsl, ctx, 'isBody');
}
exports.findBody = findBody;
function findHead(dsl, ctx) {
    return findStructureByMeta(dsl, ctx, 'isHead');
}
exports.findHead = findHead;
function findMountNode(dsl, ctx) {
    return findStructureByMeta(dsl, ctx, 'isMountNode');
}
exports.findMountNode = findMountNode;
