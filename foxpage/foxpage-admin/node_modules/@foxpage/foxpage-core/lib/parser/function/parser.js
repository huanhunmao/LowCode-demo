Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionParser = void 0;
const foxpage_shared_1 = require("@foxpage/foxpage-shared");
const sandbox_1 = require("../sandbox");
class FunctionParser {
    /**
     * parse function
     *
     * @param {Context} ctx
     * @param {{ parsedVarSet: Set<string>; parsedFnSet: Set<string> }} { parsedVarSet: record parsed variableIds, parsedFnSet: record parsed functionIds }
     * @return {*}
     */
    parse(ctx, { parsedVarSet = new Set(), parsedFnSet = new Set() }) {
        const fns = ctx.getOrigin(foxpage_shared_1.ContentType.FUNCTION);
        if ((fns === null || fns === void 0 ? void 0 : fns.length) === 0) {
            return;
        }
        fns === null || fns === void 0 ? void 0 : fns.forEach(item => {
            var _a;
            if (parsedVarSet.has(item.id)) {
                return;
            }
            const existNoParsedVar = this.checkIn(parsedVarSet, item.variables);
            if (!existNoParsedVar) {
                const content = item.schemas[0];
                const messages = [];
                try {
                    const resolvedProps = sandbox_1.executeObject(content.props, ctx.variables, messages);
                    ctx.updateResource(foxpage_shared_1.ContentType.FUNCTION, item.id, {
                        content: item,
                        parsed: resolvedProps.code,
                        parseStatus: true,
                        parseMessages: messages,
                    });
                }
                catch (e) {
                    const msg = `parse function@${item.id} failed: ${e.message}`;
                    messages.push(msg);
                    (_a = ctx.logger) === null || _a === void 0 ? void 0 : _a.warn(msg);
                }
                parsedFnSet.add(item.id);
            }
        });
    }
    checkIn(collects, list) {
        return (list === null || list === void 0 ? void 0 : list.length) ? list.findIndex(item => !collects.has(item)) > -1 : false;
    }
}
exports.FunctionParser = FunctionParser;
