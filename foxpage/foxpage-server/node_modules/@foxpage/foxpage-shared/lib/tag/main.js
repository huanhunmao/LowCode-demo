var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchContent = exports.generateQueryStringByTags = exports.generateTagByQuerystring = void 0;
const lodash_1 = __importDefault(require("lodash"));
/**
 * generate tag with url info
 * @param queryString query string
 * @returns tags
 */
exports.generateTagByQuerystring = (queryString) => {
    const searches = queryString.split('&');
    let localeTag;
    const queryTag = {};
    searches.forEach(item => {
        const [key, value] = item.split('=');
        if (key === 'locale') {
            localeTag = {
                [key]: value,
            };
        }
        else {
            if (!queryTag.query) {
                queryTag.query = {};
            }
            queryTag.query[key] = value;
        }
    });
    const tags = [];
    if (localeTag) {
        tags.push(localeTag);
    }
    if (queryTag.query) {
        tags.push(queryTag);
    }
    return tags;
};
/**
 * generate url by tags
 * @param tags tags
 */
exports.generateQueryStringByTags = (tags = []) => {
    const locales = [];
    let queries = '';
    tags.forEach(tag => {
        // pathname tag
        // if ((tag as PathnameTag).pathname) {
        //   pathname = pathnameTagToString(tag as PathnameTag, false);
        // }
        // locale tag
        if (tag.locale) {
            locales.push(localeTagToString(tag, false));
        }
        // query tag
        if (tag.query) {
            queryTagToString(tag, false).forEach(item => {
                if (item) {
                    queries = queries ? queries + '&' + item : item;
                }
            });
        }
    });
    if (locales.length > 0) {
        const strings = [];
        locales.forEach(locale => {
            if (locale) {
                strings.push(queries ? `${locale}&${queries}` : locale);
            }
        });
        return strings;
    }
    return queries ? [queries] : [];
};
/**
 * match content with tags
 * @param contents contents with tags
 * @param tags tags
 * @returns matched content
 */
exports.matchContent = (contents, tags = []) => {
    const filtered = tags && tags.length > 0
        ? contents.filter(content => {
            const { generals: contentGenerals, locales: contentLocales, isBase } = tagsToStrings(content.tags);
            if (isBase) {
                return false;
            }
            const { generals, locales } = tagsToStrings(tags);
            const result = contentGenerals.findIndex(cTag => generals.indexOf(cTag) === -1) === -1 &&
                contentLocales.indexOf(locales[0]) > -1;
            return result;
        })
        : contents;
    // default select first
    // expend: return with weight
    if (filtered.length > 0) {
        return lodash_1.default.sortBy(lodash_1.default.sortBy(filtered, (item) => item.createTime), (item) => {
            const weightTag = item.tags.find(tag => { var _a; return !!((_a = tag) === null || _a === void 0 ? void 0 : _a.weight); });
            if (weightTag) {
                return weightTag.weight;
            }
            return 0;
        })[filtered.length - 1];
    }
    return null;
};
/**
 * tags to string
 * @param tags tags
 * @returns tag string ['pathname=test-a','locale=en_US', ...]
 */
function tagsToStrings(tags) {
    let strings = [];
    const locales = [];
    let isBase = false;
    tags.forEach(tag => {
        // pathname tag
        if (tag.pathname) {
            strings.push(pathnameTagToString(tag));
        }
        // locale tag
        if (tag.locale) {
            locales.push(localeTagToString(tag));
        }
        // query tag
        if (tag.query) {
            strings = strings.concat(queryTagToString(tag));
        }
        // isBase tag
        if (tag.isBase) {
            isBase = !!tag.isBase;
        }
    });
    return {
        generals: strings.filter(item => !!item),
        locales: locales.filter(item => !!item),
        isBase,
    };
}
function pathnameTagToString(tag, lowerCase = true) {
    const { pathname } = tag;
    return `pathname=${lowerCase ? lowerCaseString(pathname) : pathname}`;
}
function localeTagToString(tag, lowerCase = true) {
    const locale = tag.locale.replace('-', '_');
    return `locale=${lowerCase ? lowerCaseString(locale) : locale}`;
}
function queryTagToString(tag, lowerCase = true) {
    const strings = [];
    const { query = {} } = tag;
    Object.keys(query).forEach(key => {
        const value = query[key];
        strings.push(`${lowerCase ? lowerCaseString(key) : key}=${lowerCase ? lowerCaseString(value) : value}`);
    });
    return strings;
}
function lowerCaseString(value) {
    return String(value).toLowerCase();
}
