Object.defineProperty(exports, "__esModule", { value: true });
exports.destroyLoadRequire = exports.loadRequirejs = exports.loadAmdModule = exports.safeConfigRequirePath = void 0;
const config_1 = require("../config");
const asset_1 = require("./asset");
let requirejsContexts = ((0, config_1.getWindow)().__FOXPAGE_REQUIREJS_CONTEXTS__ = []);
let sharedConfigPaths = {};
const find = (array, cb) => {
    for (let index = 0; index < array.length; index++) {
        const element = array[index];
        if (cb(element)) {
            return element;
        }
    }
};
function getRequirejsContext(req, name, version = 'default') {
    // find context, if this context has not loaded this module or has same version, it available
    let availableContext = find(requirejsContexts, c => c.mods[name] === undefined || c.mods[name] === version);
    // if not find, create new requirejs context
    if (!availableContext) {
        const contextName = `_foxpage_context_${requirejsContexts.length}`;
        const clonePaths = Object.assign({}, sharedConfigPaths);
        delete clonePaths[name];
        availableContext = {
            mods: {},
            contextName,
            req: req.config({
                context: contextName,
                paths: clonePaths,
                waitSeconds: 0,
            }),
        };
        requirejsContexts.push(availableContext);
    }
    availableContext.mods[name] = version;
    return availableContext;
}
function safeConfigRequirePath(req, name, url = name, requireContextName) {
    if (!name || !url) {
        return;
    }
    const configUrl = url.indexOf('?') > -1 ? url : url.substring(0, url.lastIndexOf('.'));
    sharedConfigPaths[name] = configUrl;
    // apply to other context
    // make every context has same paths config expect special module
    for (let index = 0; index < requirejsContexts.length; index++) {
        const context = requirejsContexts[index];
        if (!(name in context.mods)) {
            req.config({
                context: context.contextName,
                paths: {
                    [name]: configUrl,
                },
                waitSeconds: 0,
            });
        }
    }
    req.config({
        context: requireContextName,
        paths: {
            // requirejs 会自动加上 .js
            [name]: configUrl,
        },
        waitSeconds: 0,
    });
}
exports.safeConfigRequirePath = safeConfigRequirePath;
/**
 * load amd module by requirejs
 * if result is undefined, try load again by alias name
 * @param name
 * @param param1
 */
function loadAmdModule(name, { alias = [], url, version }) {
    const win = (0, config_1.getWindow)();
    const requirejsFn = win.requirejs || win.require;
    if (!requirejsFn) {
        throw new Error("can't find RequireJS, you may forget load it");
    }
    const { req, contextName } = getRequirejsContext(requirejsFn, name, version);
    if (url) {
        safeConfigRequirePath(requirejsFn, name, url, contextName);
    }
    return new Promise((resolve, reject) => {
        req([name], res => {
            if (typeof res === 'undefined' && alias.length) {
                const find = (idx) => {
                    const otherName = alias[idx];
                    // if find all, resolve origin result
                    if (!otherName) {
                        resolve(res);
                        return;
                    }
                    req([otherName], res => {
                        if (typeof res !== 'undefined') {
                            win.define(name, () => res);
                            resolve(res);
                        }
                        else {
                            // find next
                            find(idx + 1);
                        }
                    }, () => find(idx + 1));
                };
                return find(0);
            }
            return resolve(res);
        }, error => {
            console.error(error);
            reject(error);
        });
    });
}
exports.loadAmdModule = loadAmdModule;
let loadPromise;
function loadRequirejs(link) {
    var _a;
    const win = (0, config_1.getWindow)();
    if ((_a = win.define) === null || _a === void 0 ? void 0 : _a.amd) {
        return Promise.resolve();
    }
    if (!loadPromise) {
        loadPromise = (0, asset_1.loadScript)(link);
    }
    return loadPromise;
}
exports.loadRequirejs = loadRequirejs;
function destroyLoadRequire() {
    loadPromise = undefined;
    requirejsContexts = (0, config_1.getWindow)().__FOXPAGE_REQUIREJS_CONTEXTS__ = [];
    sharedConfigPaths = {};
}
exports.destroyLoadRequire = destroyLoadRequire;
