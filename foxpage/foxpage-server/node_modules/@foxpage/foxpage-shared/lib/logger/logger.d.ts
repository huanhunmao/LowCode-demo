import { LoggerClass } from './impl';
import { LOGGER_LEVEL, LOGGER_USE_LEVEL } from './level';
export declare type FoxpageLogger = LoggerProvider;
export declare type LoggerOption = {
    level?: LOGGER_LEVEL;
    procInfo?: number | string;
    customizeLoggers?: LoggerClass[];
};
declare class LoggerProvider implements LoggerProvider {
    private _level?;
    private type;
    private loggers;
    private timerMap;
    private option?;
    constructor(type: string, opt?: LoggerOption);
    init: (customizeLoggers?: LoggerClass[]) => this;
    private get level();
    debug: (msg: string, ...params: any[]) => void;
    info: (msg: string, ...params: any[]) => void;
    warn: (msg: string, ...params: any[]) => void;
    error: (msg: string, ...params: any[]) => void;
    timeStart: (label: string, msg?: string | undefined, ...params: any[]) => (msg?: string | undefined, ...params: any[]) => void;
    timeEnd: (label: string, msg?: string | undefined, ...params: any[]) => number;
    log: (level: LOGGER_USE_LEVEL, msg: string, params: any[]) => void;
    formatMessage: (level: string, msg: string, params: any[]) => string;
    toJSON: () => {
        name: string;
        level: string;
    };
}
export declare function createLogger(type: string, opt?: LoggerOption): LoggerProvider;
export {};
