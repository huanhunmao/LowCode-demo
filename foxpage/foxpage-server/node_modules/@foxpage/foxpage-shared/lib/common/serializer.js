Object.defineProperty(exports, "__esModule", { value: true });
exports.betterJSONStringify = exports.toJSONFriendly = void 0;
const lodash_1 = require("lodash");
function toJSONFriendly(value) {
    let friendlyValue;
    if (value instanceof Map) {
        friendlyValue = {};
        for (const it of value.entries()) {
            friendlyValue[String(it[0])] = toJSONFriendly(it[1]);
        }
        return friendlyValue;
    }
    if (value instanceof Set) {
        friendlyValue = [];
        for (const it of value.values()) {
            friendlyValue.push(toJSONFriendly(it));
        }
        return friendlyValue;
    }
    if (typeof value === 'function') {
        return value.toString();
    }
    // loop nested object
    if (typeof value === 'object' && value !== null && lodash_1.isPlainObject(value)) {
        friendlyValue = {};
        for (const it of Object.entries(value)) {
            friendlyValue[it[0]] = toJSONFriendly(it[1]);
        }
        return friendlyValue;
    }
    return value;
}
exports.toJSONFriendly = toJSONFriendly;
function stringifyReplacer(_key, value) {
    let returnValue = value;
    if (value instanceof Map) {
        returnValue = {};
        for (const it of value.entries()) {
            returnValue[it[0]] = it[1];
        }
        return returnValue;
    }
    if (value instanceof Set) {
        returnValue = [];
        for (const it of value.values()) {
            returnValue.push(it);
        }
        return returnValue;
    }
    if (typeof value === 'function') {
        return value.toString();
    }
    return returnValue;
}
function betterJSONStringify(obj) {
    try {
        return JSON.stringify(obj, stringifyReplacer);
    }
    catch (error) {
        return '';
    }
}
exports.betterJSONStringify = betterJSONStringify;
