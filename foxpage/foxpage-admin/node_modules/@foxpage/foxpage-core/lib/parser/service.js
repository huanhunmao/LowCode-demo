Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.getParser = exports.initParser = void 0;
const parser_1 = require("./parser");
let parser;
/**
 * init parser
 * @param opt parser init options
 * @returns parser instance
 */
exports.initParser = async (opt) => {
    parser = new parser_1.ParserImpl();
    await parser.prepare(opt);
    return parser;
};
/**
 * get the parser instance
 * @returns parser
 */
exports.getParser = () => {
    return parser;
};
/**
 * parse
 * @param page page content
 * @param ctx Context
 * @returns parsed
 */
exports.parse = async (page, ctx) => {
    var _a, _b;
    if (!parser) {
        const msg = 'parser instance is invalid.';
        (_a = ctx.logger) === null || _a === void 0 ? void 0 : _a.error(msg);
        throw new Error('msg');
    }
    const sessionId = Symbol(new Date().getTime());
    try {
        parser.preParse(page, ctx, { sessionId });
        const result = await parser.parse(sessionId, ctx);
        const { parsed, messages } = result || {};
        parser.reset({ sessionId });
        return {
            messages,
            page: {
                id: page.id,
                schemas: parsed,
            },
            ctx,
        };
    }
    catch (e) {
        (_b = ctx.logger) === null || _b === void 0 ? void 0 : _b.error('parse failed:', e);
        parser.reset({ sessionId });
        return {
            messages: [],
            page: {},
            ctx,
        };
    }
};
