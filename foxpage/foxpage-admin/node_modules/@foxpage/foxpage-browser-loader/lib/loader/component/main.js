Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentModule = exports.loadComponent = exports.configComponent = void 0;
const utils_1 = require("@foxpage/foxpage-shared/lib/common/utils");
const module_1 = require("../../module");
const utils_2 = require("./utils");
function extname(filename) {
    return filename.substr(filename.lastIndexOf('.') + 1);
}
function findComponentDeps(meta, opt = { ignoreStyleAsset: false }) {
    const { assets, softDeps = [] } = meta;
    const deps = [].concat(softDeps);
    if (assets) {
        for (let i = 0; i < assets.length; i++) {
            const asset = assets[i];
            const { url } = asset;
            if (url) {
                const type = asset.type || extname(url);
                switch (type) {
                    case 'css':
                        if (!opt.ignoreStyleAsset) {
                            const name = `css_${url}`;
                            (0, module_1.addModule)(name, { type: 'css', url });
                            deps.push(name);
                        }
                        break;
                    case 'js':
                        const name = `js_${url}`;
                        (0, module_1.addModule)(name, { type: 'js', url });
                        deps.push(name);
                        break;
                }
            }
        }
    }
    return deps;
}
function _configComponent(mod, opt) {
    const { name, version, url, deps = [], meta = {} } = mod;
    const softDeps = findComponentDeps(meta, opt);
    const nameWithVersion = `${name}@${version}`;
    // for support module deps, one page may exist one module multi versions
    // each module umd name will include version, like "demo.comp@0.2.2"
    // compatible old umd module which name exclude version, like: "demo.comp"
    // we use "moduleNameWithVersion" in component meta to diff, and alias
    const umdModuleName = ((meta === null || meta === void 0 ? void 0 : meta.moduleNameWithVersion) || 1) > 1 ? nameWithVersion : name;
    (0, module_1.addModule)(name, {
        url,
        version,
        umdModuleName,
        alias: [nameWithVersion, name],
        deps,
        softDeps,
        injectWindow: nameWithVersion,
        meta,
    });
}
function configComponent(modOrList, opt = {}) {
    if ((0, utils_1.isArray)(modOrList)) {
        modOrList.forEach(mod => _configComponent(mod, opt));
    }
    else {
        _configComponent(modOrList, opt);
    }
}
exports.configComponent = configComponent;
function loadComponent(type, version) {
    return (0, module_1.loadModule)(type, version).then(exported => {
        const componentFactory = (0, utils_2.getDefaultExport)(exported);
        if (!componentFactory) {
            throw new Error(`component ${type} load fail, :${version || ''} get undefined`);
        }
        componentFactory.displayName = `${type}@${version || ''}`;
        return componentFactory;
    });
}
exports.loadComponent = loadComponent;
function getComponentModule(type, version) {
    const f = (0, module_1.getModule)(type, version);
    return f
        ? {
            type,
            version,
            factory: (0, utils_2.getDefaultExport)(f.exports),
            meta: f.meta,
        }
        : null;
}
exports.getComponentModule = getComponentModule;
