Object.defineProperty(exports, "__esModule", { value: true });
exports.withVariableMock = void 0;
const foxpage_shared_1 = require("@foxpage/foxpage-shared");
const utils_1 = require("./utils");
/**
 * variable mock
 * @param variables
 * @param ctx
 * @returns mocked variables
 */
exports.withVariableMock = (variables = [], ctx) => {
    if (variables.length === 0) {
        return [];
    }
    // get mocks from ctx
    // this data will init before parse lifecycle
    const { pageMock, extendMock } = utils_1.getUsedMocks(ctx.getOrigin('mocks'), ctx);
    if (pageMock || extendMock) {
        const { idMockMap = {} } = pageMock ? utils_1.preMock(pageMock) : {};
        const { idMockMap: extendIdMockMap = {} } = extendMock ? utils_1.preMock(extendMock) : {};
        variables.forEach(variable => {
            const { id, schemas = [] } = variable || {};
            // variable content only had one schema node
            const variableItem = schemas[0];
            if (variableItem) {
                let mock = idMockMap[id]; // id
                if (!mock) {
                    mock = extendIdMockMap[id]; //extend id
                }
                if (mock) {
                    // update variable mock to ctx
                    ctx.updateResource(foxpage_shared_1.ContentType.VARIABLE, variableItem.name, {
                        content: variable,
                        parsed: mock.props.value,
                        parseStatus: true,
                        parseMessages: ['variable mocked'],
                    });
                }
            }
        });
    }
    return variables;
};
