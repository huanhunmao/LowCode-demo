Object.defineProperty(exports, "__esModule", { value: true });
exports.MainParser = void 0;
const foxpage_shared_1 = require("@foxpage/foxpage-shared");
const page_1 = require("./page");
const template_1 = require("./template");
class MainParser {
    constructor({ page }, ctx) {
        /**
         * messages
         */
        this.messages = new foxpage_shared_1.Messages();
        this.templateParser = new template_1.TemplateParserImpl();
        this.pageParser = new page_1.PageParserImpl(page);
        this.prepare(ctx);
    }
    prepare(ctx) {
        var _a, _b;
        (_a = this.pageParser) === null || _a === void 0 ? void 0 : _a.preParse(ctx);
        (_b = this.templateParser) === null || _b === void 0 ? void 0 : _b.preParse(ctx, {
            containerGetter: templateId => { var _a; return (_a = this.pageParser) === null || _a === void 0 ? void 0 : _a.getTemplateSchemas(templateId); },
        });
    }
    async parse(ctx) {
        var _a, _b, _c, _d;
        if (!this.pageParser) {
            throw new Error('page parser instance is invalid.');
        }
        (_a = ctx.logger) === null || _a === void 0 ? void 0 : _a.info('start parse page & template');
        (_b = this.templateParser) === null || _b === void 0 ? void 0 : _b.parse(ctx);
        const parsedPageSchemas = this.pageParser.parse(ctx);
        if (this.pageParser.messages.hasError) {
            (_c = this.messages) === null || _c === void 0 ? void 0 : _c.push(this.pageParser.messages.toString());
            return;
        }
        ctx.updatePage({
            id: this.pageParser.page.id,
            schemas: parsedPageSchemas,
            relation: this.pageParser.page.relation,
        });
        (_d = ctx.logger) === null || _d === void 0 ? void 0 : _d.info(`page@${ctx.page.id} parsed success.`);
        const result = ctx.page.schemas;
        // clear
        this.reset();
        return { parsed: result, messages: this.messages };
    }
    reset() {
        this.pageParser = undefined;
        this.templateParser = undefined;
        this.messages = undefined;
    }
}
exports.MainParser = MainParser;
