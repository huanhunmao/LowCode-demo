import { ModuleConfig } from '@foxpage/foxpage-types';
import { Config } from './config';
import { IModuleSystem } from './interface';
export interface CreateModuleSystemOptions {
    config?: Partial<Config>;
}
declare global {
    interface Window {
        __FOXPAGE_MODULE_SYSTEM__: any;
    }
}
export declare function createModuleSystem(opt: CreateModuleSystemOptions): IModuleSystem;
export declare function destroyModuleSystem(): void;
export declare function clearCache(): void;
export declare function addModule(mods: Record<string, ModuleConfig>): void;
export declare function addModule(name: string, opt: ModuleConfig): void;
export declare function loadModule(list: string[]): Promise<any[]>;
export declare function loadModule<T = any>(name: string, ver?: string): Promise<T>;
export declare function getModule(name: string, ver?: string): (import("./interface").IModule<any> & Pick<import("./interface").IModuleLoader<any>, "status">) | undefined;
export declare function configModuleSystem(opt: Partial<Config>): void;
