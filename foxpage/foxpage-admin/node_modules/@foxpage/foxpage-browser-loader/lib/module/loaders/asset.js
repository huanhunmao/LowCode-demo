Object.defineProperty(exports, "__esModule", { value: true });
exports.loadScriptModule = exports.loadStyleModule = exports.loadScript = exports.loadStyle = void 0;
const config_1 = require("../config");
function getDocument() {
    const win = (0, config_1.getWindow)();
    return win.document;
}
function findAssetElement(tag, targetLink) {
    const els = getDocument().getElementsByTagName(tag);
    for (let index = 0; index < els.length; index++) {
        const element = els[index];
        const link = element.src || element.href;
        if (link === targetLink) {
            return element;
        }
    }
}
function waitElementLoad(element) {
    return new Promise((resolve, reject) => {
        element.addEventListener('load', () => resolve(undefined));
        element.addEventListener('error', reject);
        element.addEventListener('abort', reject);
    });
}
function createCssElement(link) {
    const element = getDocument().createElement('link');
    element.setAttribute('href', link);
    element.setAttribute('rel', 'stylesheet');
    return element;
}
function createScriptElement(link) {
    const element = getDocument().createElement('script');
    element.src = link;
    element.async = true;
    return element;
}
function setElementDataAttr(element, dataInfo) {
    Object.keys(dataInfo).forEach(k => {
        element.setAttribute(`data-${k}`, dataInfo[k]);
    });
}
function loadStyle(link, dataInfo = {}) {
    let element = findAssetElement('link', link);
    if (!element) {
        const head = getDocument().getElementsByTagName('head')[0];
        element = createCssElement(link);
        setElementDataAttr(element, dataInfo);
        head.appendChild(element);
    }
    return Promise.resolve();
}
exports.loadStyle = loadStyle;
function loadScript(link, dataInfo = {}) {
    let element = findAssetElement('script', link);
    if (!element) {
        const head = getDocument().getElementsByTagName('head')[0];
        element = createScriptElement(link);
        setElementDataAttr(element, dataInfo);
        head.appendChild(element);
    }
    return waitElementLoad(element);
}
exports.loadScript = loadScript;
const loadStyleModule = mod => {
    return loadStyle(mod.url, {
        by: 'foxpage',
        moduleId: mod.id,
    });
};
exports.loadStyleModule = loadStyleModule;
const loadScriptModule = mod => {
    return loadScript(mod.url, {
        by: 'foxpage',
        moduleId: mod.id,
    });
};
exports.loadScriptModule = loadScriptModule;
