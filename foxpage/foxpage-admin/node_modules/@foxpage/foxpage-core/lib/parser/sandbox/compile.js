Object.defineProperty(exports, "__esModule", { value: true });
exports.compilePropsToGetter = void 0;
const lodash_1 = require("lodash");
const constant_1 = require("./constant");
const main_1 = require("./main");
const ARG_VARIABLES = 'variables';
const ARG_MESSAGES = 'messages';
const STRINGIFY_FN_NAME = '$stringify';
function createPropDeclarator(val, varDeclarations) {
    if (typeof val === 'string') {
        if (val.startsWith('{{') && val.indexOf('}}') === val.length - 2) {
            const expression = val.substring(2, val.length - 2);
            const objKey = `$ref_${varDeclarations.length}`;
            const varDeclaration = createExpressionDeclarator(objKey, expression);
            varDeclarations.unshift(varDeclaration);
            return objKey;
        }
        const quotationMark = !val.includes('`') ? '`' : !val.includes(`"`) ? '"' : "'";
        if (constant_1.MATCH_EXPRESSION_REGEX.test(val)) {
            const replaced = val.replace(constant_1.MATCH_EXPRESSION_REGEX, (_match, expression) => {
                const objKey = `$ref_${varDeclarations.length}`;
                const varDeclaration = createExpressionDeclarator(objKey, expression);
                varDeclarations.unshift(varDeclaration);
                return `${quotationMark} + ${STRINGIFY_FN_NAME}(${objKey}) + ${quotationMark}`;
            });
            return `${quotationMark}${replaced}${quotationMark}`;
        }
        else {
            return `${quotationMark}${val}${quotationMark}`;
        }
    }
    else if (lodash_1.isPlainObject(val)) {
        return createObjectDeclarator(val, varDeclarations);
    }
    else if (Array.isArray(val)) {
        return createArrayDeclarator(val, varDeclarations);
    }
    return val;
}
function createExpressionDeclarator(key, expression) {
    const safeExpression = decodeURIComponent(expression);
    const declarator = `const ${key} = (function iife(){
    try {
      with (${ARG_VARIABLES}) {
        return ${expression};
      }
    } catch (error) {
      ${ARG_MESSAGES}.push(\`parse string "${safeExpression}" fail, reason:\` + (error && error.message));
      return undefined;
    }
  })();`;
    return declarator;
}
function createArrayDeclarator(arr, varDeclarations = []) {
    let declarator = `[\n`;
    for (const v of arr) {
        declarator += `${createPropDeclarator(v, varDeclarations)},\n`;
    }
    declarator += ']';
    return declarator;
}
function createObjectDeclarator(props, varDeclarations = []) {
    let declarator = `{\n`;
    for (const [k, v] of Object.entries(props)) {
        declarator += `${k}: ${createPropDeclarator(v, varDeclarations)},\n`;
    }
    declarator += '}';
    return declarator;
}
function compilePropsToGetter(props = {}, _messages = []) {
    const clone = Object.assign({}, props);
    delete clone.children;
    const varDeclarations = [];
    const declarator = createObjectDeclarator(clone, varDeclarations);
    const fn = `function __props_getter(${ARG_VARIABLES}, ${ARG_MESSAGES}) {
    const ${STRINGIFY_FN_NAME} = function ${STRINGIFY_FN_NAME}(val) {
      if (typeof val === 'object' && val !== null && Object.getPrototypeOf(val) === Object.prototype) {
        try {
          return JSON.stringify(val);
        } catch (error) {}
      }
      return String(val);
    };
    ${varDeclarations.join('\n')}\n
    const __ret = ${declarator};
    return __ret;
  }`;
    const getter = main_1.evalWithScope({}, fn);
    return getter;
}
exports.compilePropsToGetter = compilePropsToGetter;
