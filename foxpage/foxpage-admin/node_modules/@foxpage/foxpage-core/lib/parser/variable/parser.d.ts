import { Context, FoxpageHooks, VariableParseEntity, VariableParser, VariableType } from '@foxpage/foxpage-types';
export declare type VariableParserOption = {
    hooks?: FoxpageHooks;
};
/**
 * variable parser
 *
 * @export
 * @class VariableParser
 */
export declare class VariableParserImpl implements VariableParser {
    /**
     * parser maps
     *
     * @private
     */
    private parserMap;
    /**
     * function parser
     *
     * @private
     * @type {FunctionParser}
     */
    private functionParser?;
    private maxLoopCount;
    constructor();
    /**
     * get variable parser by variable type
     *
     * @param {VariableType} type
     * @return {*}
     */
    get(type: VariableType): VariableParseEntity<any, any> | undefined;
    /**
     * register the variable parser
     *
     * @param {VariableParseEntity} parser
     */
    register(parser: VariableParseEntity): void;
    /**
     * register dynamic by hooks
     * @param hooks
     */
    registerDynamic(hooks?: FoxpageHooks): Promise<void>;
    /**
     * unregister variable parser
     *
     * @param {VariableType} type
     */
    unRegister(type: VariableType): void;
    /**
     * pre parse
     */
    preParse(): void;
    /**
     * parse variable
     *
     * @param {Context} ctx
     * @param {{ parsedVarSet: Set<string>; parsedFnSet: Set<string> }} { parsedVarSet: record parsed variableIds, parsedFnSet: record parsed functionIds }
     * @return {*}
     */
    parse(ctx: Context, { parsedVarSet, parsedFnSet }: {
        parsedVarSet?: Set<string>;
        parsedFnSet?: Set<string>;
    }): Promise<void>;
    private checkIn;
    private createParser;
}
