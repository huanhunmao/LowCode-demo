Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserImpl = void 0;
const foxpage_shared_1 = require("@foxpage/foxpage-shared");
const mocker_1 = require("../mocker");
const condition_1 = require("./condition");
const main_1 = require("./main");
const variable_1 = require("./variable");
/**
 * parser implements
 *
 * @export
 * @class ParserImpl
 * @implements {Parser}
 */
class ParserImpl {
    constructor() {
        this.mainParsers = {};
        this.variableParser = new variable_1.VariableParserImpl();
        this.conditionParser = new condition_1.ConditionParserImpl();
    }
    /**
     * prepare
     * @param opt parserOption
     */
    async prepare(opt) {
        var _a;
        const { hooks } = opt || {};
        await ((_a = this.variableParser) === null || _a === void 0 ? void 0 : _a.registerDynamic(hooks === null || hooks === void 0 ? void 0 : hooks.variable));
    }
    /**
     * pre parse
     * first step: preParse page
     * second step: preParse template
     */
    preParse(page, ctx, opt) {
        var _a;
        this.mainParsers[opt.sessionId] = new main_1.MainParser({ page }, ctx);
        (_a = this.variableParser) === null || _a === void 0 ? void 0 : _a.preParse();
    }
    /**
     * parse
     * first: variable(functions)
     * second: condition
     * last: page
     */
    async parse(sessionId, ctx) {
        var _a, _b, _c;
        if (!this.mainParsers[sessionId]) {
            throw new Error('parser instance is invalid.');
        }
        await ((_a = this.variableParser) === null || _a === void 0 ? void 0 : _a.parse(ctx, {}));
        (_b = this.conditionParser) === null || _b === void 0 ? void 0 : _b.parse(ctx);
        // with variable mock
        if (ctx.isMock) {
            mocker_1.withVariableMock(ctx.getOrigin(foxpage_shared_1.ContentType.VARIABLE), ctx);
        }
        return (_c = this.mainParsers[sessionId]) === null || _c === void 0 ? void 0 : _c.parse(ctx);
    }
    /**
     * get parse status
     *
     * @return {*}  {boolean} true:parsed,false:no parse
     */
    isParsed() {
        return false;
    }
    /**
     * clear instance
     *
     */
    reset(opt) {
        delete this.mainParsers[opt.sessionId];
    }
}
exports.ParserImpl = ParserImpl;
