Object.defineProperty(exports, "__esModule", { value: true });
exports.configModuleSystem = exports.getModule = exports.loadModule = exports.addModule = exports.clearCache = exports.destroyModuleSystem = exports.createModuleSystem = void 0;
const utils_1 = require("@foxpage/foxpage-shared/lib/common/utils");
const requirejs_1 = require("./loaders/requirejs");
const umd_1 = require("./loaders/umd");
const config_1 = require("./config");
const graph_1 = require("./graph");
let moduleSystem = new graph_1.ModuleGraph();
function createModuleSystem(opt) {
    opt.config && configModuleSystem(opt.config);
    const win = (0, config_1.getWindow)();
    const newModuleSystem = (win.__FOXPAGE_MODULE_SYSTEM__ =
        win.__FOXPAGE_MODULE_SYSTEM__ || moduleSystem || new graph_1.ModuleGraph());
    moduleSystem = newModuleSystem;
    return newModuleSystem;
}
exports.createModuleSystem = createModuleSystem;
function destroyModuleSystem() {
    moduleSystem = new graph_1.ModuleGraph();
    const win = (0, config_1.getWindow)();
    win.__FOXPAGE_MODULE_SYSTEM__ = null;
}
exports.destroyModuleSystem = destroyModuleSystem;
function clearCache() {
    destroyModuleSystem();
    (0, umd_1.destroyUmd)();
    (0, requirejs_1.destroyLoadRequire)();
}
exports.clearCache = clearCache;
function addModule(nameOrMods, opt) {
    if (typeof nameOrMods === 'string') {
        moduleSystem.add(nameOrMods, opt);
        return;
    }
    (0, utils_1.eachObject)(nameOrMods, (config, moduleName) => {
        moduleSystem.add(moduleName, config);
    });
}
exports.addModule = addModule;
function loadModule(nameOrList, ver) {
    if (typeof nameOrList === 'string') {
        return moduleSystem.load(nameOrList, ver);
    }
    return Promise.all(nameOrList.map(modName => moduleSystem.load(modName)));
}
exports.loadModule = loadModule;
function getModule(name, ver) {
    return moduleSystem.get(name, ver);
}
exports.getModule = getModule;
function configModuleSystem(opt) {
    (0, config_1.setConfig)(opt);
}
exports.configModuleSystem = configModuleSystem;
