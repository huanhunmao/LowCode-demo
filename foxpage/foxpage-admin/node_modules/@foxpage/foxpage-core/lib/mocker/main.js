Object.defineProperty(exports, "__esModule", { value: true });
exports.withMock = exports.mockTemplate = exports.mockPage = void 0;
const utils_1 = require("./utils");
/**
 * parse page with mock
 * @param page
 * @param mock
 * @param extendMock
 * @returns
 */
exports.mockPage = (page, mock, extendMock) => {
    const { idMockMap = {}, typeMockMap = {} } = mock ? utils_1.preMock(mock) : {};
    const { idMockMap: extendIdMockMap = {}, typeMockMap: extendTypeMockMap = {} } = extendMock
        ? utils_1.preMock(extendMock)
        : {};
    const dfs = (list = []) => {
        list.forEach(item => {
            var _a;
            let mock = idMockMap[item.id]; // id
            if (!mock) {
                mock = typeMockMap[item.name]; // name
            }
            if (!mock) {
                mock = extendIdMockMap[item.id]; //extend id
            }
            if (!mock) {
                mock = extendTypeMockMap[item.name]; //extend name
            }
            if (mock) {
                item.props = utils_1.mergeProps(item.props, mock.props);
            }
            if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.length) {
                dfs(item.children);
            }
        });
    };
    dfs(page.schemas);
    return page;
};
/**
 * parse template with mock
 * @param template
 * @param mock
 * @returns
 */
exports.mockTemplate = (template, mock) => {
    const { idMockMap = {}, typeMockMap = {} } = mock ? utils_1.preMock(mock) : {};
    const dfs = (list = []) => {
        list.forEach(item => {
            var _a;
            let mock = idMockMap[item.id]; // id
            if (!mock) {
                mock = typeMockMap[item.name]; // name
            }
            if (mock) {
                item.props = utils_1.mergeProps(item.props, mock.props);
            }
            if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.length) {
                dfs(item.children);
            }
        });
    };
    dfs(template.schemas);
    return template;
};
/**
 * with mock
 * merge mock data to contents
 * @param mocks
 * @param ctx
 * @param opt
 * @returns
 */
exports.withMock = (mocks, ctx, _opt) => {
    var _a;
    const mockMap = {};
    mocks.forEach(item => {
        mockMap[item.id] = item;
    });
    let page = ctx.getOrigin('page');
    // deal with page (extend) mock
    if (page) {
        const { pageMock, extendMock } = utils_1.getUsedMocks(mocks, ctx);
        if (pageMock || extendMock) {
            page = exports.mockPage(page, pageMock, extendMock);
        }
    }
    // deal with templates mock
    const templates = (_a = ctx.getOrigin('templates')) === null || _a === void 0 ? void 0 : _a.map(item => {
        const { mockId = '' } = item.extension || {};
        const templateMock = mockMap[mockId];
        const template = templateMock ? exports.mockTemplate(item, templateMock) : item;
        return template;
    });
    return { page, templates };
};
