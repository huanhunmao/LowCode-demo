import { AppConfig, Context, ContextOrigin, ContextResource, Page, RelationInfo, RenderAppInfo, RenderContent, Template } from '@foxpage/foxpage-types';
/**
 * Foxpage abstract context
 *
 * @export
 * @abstract
 * @class ContextInstance
 * @implements {Context}
 */
export declare abstract class ContextInstance implements Context {
    readonly appId: string;
    readonly appSlug: string;
    readonly appConfigs?: AppConfig;
    private innerPage?;
    url: string;
    host: string;
    /**
     * parsed resources
     *
     * @type {ContextResource}
     */
    private resource;
    /**
     * origin resources
     * immutable
     * @type {ContextOrigin}
     */
    readonly origin: ContextOrigin;
    constructor(info: RenderAppInfo);
    /**
     * update relation info
     * @param relationInfo relation info
     */
    updateOrigin<K extends keyof Pick<ContextOrigin, 'templates' | 'functions' | 'conditions' | 'mocks'>>(relationInfo: RelationInfo): void;
    /**
     * update origin data
     * @param key key type
     * @param value data
     */
    updateOriginByKey<K extends keyof ContextOrigin>(key: K, value: ContextOrigin[K]): void;
    /**
     * update origin page
     *
     * @param {Page} page
     */
    updateOriginPage(page: Page): void;
    /**
     * get origin
     *
     * @template K
     * @param {K} key
     * @return {*}  {RenderContextOrigin[K]}
     */
    getOrigin<K extends keyof ContextOrigin>(key: K): ContextOrigin[K];
    /**
     * update page info
     *
     * @param {Page} page
     */
    updatePage(page: Page): void;
    /**
     * update ctx resources
     *
     * @template K
     * @template T
     * @param {K} target
     * @param {string} key
     * @param {T} value
     */
    updateResource<K extends keyof ContextResource, T extends RenderContent>(target: K, key: string, value: T): void;
    get page(): Page;
    get templates(): Record<string, Template>;
    get conditions(): Record<string, boolean>;
    get functions(): Record<string, unknown>;
    get variables(): Record<string, unknown>;
    private getValues;
    private filterVariables;
}
