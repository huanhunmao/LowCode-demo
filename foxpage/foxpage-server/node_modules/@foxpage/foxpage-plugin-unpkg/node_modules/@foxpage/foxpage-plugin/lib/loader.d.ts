import { FoxpagePlugin, PluginLoader, PluginLoaderOptions } from './interfaces';
import { Mode } from './mode';
export declare type FoxpagePluginVisitor = FoxpagePlugin<Record<string, Array<any>>>['visitor'];
/**
 * plugin loader impl
 *
 * @export
 * @class PluginLoaderImpl
 * @implements {PluginLoader}
 */
export declare class PluginLoaderImpl implements PluginLoader {
    baseDir: string;
    api: PluginLoaderOptions['api'];
    list: string[];
    visitors: FoxpagePluginVisitor;
    mode: Mode;
    private readonly pluginDir;
    private readonly pluginMap;
    constructor(opt: PluginLoaderOptions);
    /**
     * get plugin entry
     *
     * @private
     * @param {string} name
     * @return {string}
     */
    private resolvePlugin;
    /**
     * load plugins
     *
     */
    load(): void | null;
    /**
     * register a plugin
     *
     * @param {string} name
     * @return {*}
     */
    registerPlugin(name: string): void;
    /**
     * unregister a plugin
     *
     * @param {string} name
     * @memberof PluginLoaderImpl
     */
    unregisterPlugin(name: string): void;
    /**
     * get a plugin
     *
     * @param {string} name
     * @return {*}
     */
    getPlugin(name: string): FoxpagePlugin<Record<string, any>> | undefined;
    /**
     * get all plugin name list
     *
     * @return {string[]}
     */
    getList(): string[];
    /**
     * check if exist the plugin
     *
     * @param {string} name
     * @return {boolean}
     */
    hasPlugin(name: string): boolean;
    /**
     * merge visitors
     */
    mergeVisitors(): void;
    /**
     * get hooks
     * current only support Mode.PIPE
     * @return {*}
     */
    getHooks(): Partial<Record<"beforeNodeBuild" | "afterNodeBuild" | "beforePageBuild" | "afterPageBuild" | "beforeDSLFetch" | "afterDSLFetch" | "beforeNodeParse" | "afterNodeParse" | "beforeDSLParse" | "afterDSLParse" | "beforePageRender" | "onPageRender" | "afterPageRender" | "beforeIgnite" | "afterIgnite" | "registerVariableParser" | "afterContextCreate", () => void>>;
    /**
     * destroy
     */
    destroy(): void;
}
